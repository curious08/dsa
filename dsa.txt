Welcome to datastructure and algorithms with java

DSA

Design and Analysis of Algorithm
----------------------------------
Chapter: 01 Introduction to DSA
Chapter: 02 Problem Solving
Chapter: 03 Time and Space Complexity
Chapter: 04 Notations
Chapter: 05 Aspects of Algorithms
Chapter: 06 Mathematical Algorithms
Chapter: 07 Bitwise opertations
Chapter: 08 Recursion
Chapter: 09 Arrays
Chapter: 10 Matrix
Chapter: 11 Searching and Sorting Techniques
Chapter: 12 LinkedLists
Chapter: 13 Stacks
Chapter: 14 Queues
Chapter: 15 Binary Trees
Chapter: 16 Hashtables
Chapter: 17 Hashing
Chapter: 18 AVL Tree
Chapter: 19 Dictionaries or Maps
Chapter: 20 Graph
Chapter: 21 Greedy
Chapter: 22 Backtracking
Chapter: 23 Dynamic programming

before moving to dsa we are going to take some examples
Music Players --> Spotify, Gana, Jio Savan

data --> .mp3 songs
searching, sorting, queue

Linked list ---> Music Players

Spam email detection
-----------------------
10 unknown company ---> 10 spam per day
throw 'xyz' ---> spam
String data structure ----> spam emails

BookMyShow Application
------------------------

array data structure ---> 2-D arrays ---> reservation of seats


Data Structure:
---------------
Arranging data in a proper structure is called as Data Structure or organizing data is 
called as Data Strucutre.

The following are various operation we can perform on Data Structures
	
	1. inserting new data
	2. deletion of existing data
	3. updation of existing data
	4. Searching (Linear, Binary)
	5. Sorting
	etc

Algorithm
---------
Step by step to solve a problem is called algorithm
concentration on design part and implementaion on java
english instruction

Problem statement
=======================
implement a program to perform addtion of two programms

Alg
	1. read two numbers from user
	2. use arithmetic operator to calculate result
	3. c=a+b;
	4. print result to console, screen, file or database

Implementation:
	
	int addition(int a, int b)
	{
		int c;
		c = a + b;
		return c;
	}

java code:

class Demo
{
	static int addition(int a, int b)
	{
		int c;
		c = a + b;
		return c;
	}
}

class  Test
{
	public static void main(String[] args) 
	{
		System.out.println(Demo.addition(1,2));//3
	}
}


some example and various possible solution we will foucs
==========================================================
1.  addition of two numbers
2.  swapping of two numbers
3.  max of two numbers
4.  even or odd of two numbers
5.  sum of n natural numbers
6.  max of three numbers
7.  factorial
8.  prime number or not
9.  fibnacci series
10. tribonocii series

Photos in Gallery
---------------------
which data structure followed in Gallery Application?
Stack

sending emails to People
-----------------------------
200 students
send a mail to all students
data structure => Queue

File Explorer|Directory Explorer|Folder explorer
-------------------------------------------------
=> c:\code
data structure => Tree

GPS Navigation System
---------------------------
Travel from one location to another location
data structure =>Graph

trending videos in youtube which data strucure is used sir? just guess
-----------------------------------------------------------
Priority Queue

Q ---> V1(2M), V2(5M), V3(1M), V4(6M), V5(3M)

Sorting ---> V4, V2, V5, V1, V3

Problem Statement:
Write a program to swap two given integers.
-----------------------------------------
Algorithm:
	=> read two parameters from the user
	=> implement business logic related to swapping
	
	logic1
	logic2
	logic3
	logic4
	logic5
	=> print the data before swapping and after swapping

Note: In java call by refrence concept is not there.
logic1:
	=> declare one temp variable
	=> print a and b value
	    temp = a;
	    a = b;
	    b = temp;
	=> print a and b value

Implementation
------------------------------
import java.util.*;
class Demo
{
	static void swap(int a, int b)
	{
		System.out.println("Before swapping a="+a+" and b="+b);
		int temp;
		temp = a;
		a = b;
		b = temp;
		System.out.println("Before swapping a="+a+" and b="+b);
	}
}

class  Test
{
	public static void main(String[] args) 
	{
		Scanner obj = new Scanner(System.in);
		System.out.println("Enter a value ");
		int a = obj.nextInt();
		System.out.println("Enter b value ");
		int b = obj.nextInt();
		Demo.swap(a,b);

	}
}


Logic2: 
	=> print a and b value
	=> by using addition and substraction
		a = a + b;
		b = a - b;
		a = a - b;
	=> print a and b value

Implementation
-------------------------
import java.util.*;
class Demo
{
	static void swap(int a, int b)
	{
		System.out.println("Before swapping a="+a+" and b="+b);
		a = a + b;
		b = a - b;
		a = a - b;
		System.out.println("Before swapping a="+a+" and b="+b);
	}
}

class  Test
{
	public static void main(String[] args) 
	{
		Scanner obj = new Scanner(System.in);
		System.out.println("Enter a value ");
		int a = obj.nextInt();
		System.out.println("Enter b value ");
		int b = obj.nextInt();
		Demo.swap(a,b);

	}
}

Logic3: 
	=> print a and b value
	=> by using multiplication and division
		a = a * b;
		b = a / b;
		a = a / b;
	=> print a and b value

Implementation
-----------------------
import java.util.*;
class Demo
{
	static void swap(int a, int b)
	{
		System.out.println("Before swapping a="+a+" and b="+b);
		a = a * b;
		b = a / b;
		a = a / b;
		System.out.println("Before swapping a="+a+" and b="+b);
	}
}

class  Test
{
	public static void main(String[] args) 
	{
		Scanner obj = new Scanner(System.in);
		System.out.println("Enter a value ");
		int a = obj.nextInt();
		System.out.println("Enter b value ");
		int b = obj.nextInt();
		Demo.swap(a,b);

	}
}

Algorithm:
----------

==> Step by step process to solve a problem is called as an algorithm.
==> Here we will concentrate on design part but not on implementation (Java).
==> no syntax, english instructions.


Priori Analysis				   Posteriori Analysis
----------------		           -------------------
1. Algorithm				   1. Program
2. Indepedent from programming lang	   2. Language dependent
3. Hardware independent			   3. H/W dependent
4. time and space complexities notations   4. time and space will be measured in bytes and sec


Logic4: without using temp variable using bitwise operators
------------------------------------------------------------
	 ==> print a and b values
	 ==> by using bitwise operators

	 	a = a ^ b;
		b = a ^ b;
		a = a ^ b;	 	

	 ==> print a and b value

Note: you must know how to convert Dec into Bin and Bin into Dec

1	2	4	8
2^0	2^1	2^2	2^3

10 => 1010
9  => 1001
7  => 0111
14 => 1110

0 ^ 0 =>0
1 ^ 1 =>0
1 ^ 0 =>1
0 ^ 1 =>1

Implementation
-----------------------
import java.util.*;
class Demo
{
	static void swap(int a, int b)
	{
		System.out.println("Before swapping a="+a+" and b="+b);
		a = a ^ b;
		b = a ^ b;
		a = a ^ b;
		System.out.println("Before swapping a="+a+" and b="+b);
	}
}

class  Test
{
	public static void main(String[] args) 
	{
		Scanner obj = new Scanner(System.in);
		System.out.println("Enter a value ");
		int a = obj.nextInt();
		System.out.println("Enter b value ");
		int b = obj.nextInt();
		Demo.swap(a,b);

	}
}

logic5 : without using temp variable by using single line
-------------------------------------------------------------
	=> print a and b values
	=> by using single line

	   a = (a+b)-(b=a);

	=> print a and b value

Implementation
--------------------
import java.util.*;
class Demo
{
	static void swap(int a, int b)
	{
		System.out.println("Before swapping a="+a+" and b="+b);
		a = (a+b)-(b=a);
		System.out.println("Before swapping a="+a+" and b="+b);
	}
}

class  Test
{
	public static void main(String[] args) 
	{
		Scanner obj = new Scanner(System.in);
		System.out.println("Enter a value ");
		int a = obj.nextInt();
		System.out.println("Enter b value ");
		int b = obj.nextInt();
		Demo.swap(a,b);

	}
}

Design a program to find  max of two numbers
----------------------------------------------
Algorithm
	1. read two numbers from user
	2. apply logic 
	  version1
		Ternary operator
		(condition)?tb:fb
		(a>b)?a:b
	  version2
		Math.max(a,b)
	3. print the result

Implementation
------------------
import java.util.*;
class Demo
{
	static int max_version1(int a, int b)
	{
		//manual code
		return (a>b)?a:b;
	}
	static int max_version2(int a, int b)
	{
		return Math.max(a,b);
	}

}

class  Test
{
	public static void main(String[] args) 
	{
		Scanner obj = new Scanner(System.in);
		System.out.println("Enter a value ");
		int a = obj.nextInt();
		System.out.println("Enter b value ");
		int b = obj.nextInt();
		System.out.println("Max value from version1: "+Demo.max_version1(a,b));
		System.out.println("Max value from version2: "+Demo.max_version2(a,b));

	}
}

Design a program to find where the given number is odd or even
----------------------------------------------------------------
Algorithm
	1. read the number n value from the user
	2. if n is divisble by 2 means "even" else "odd"
		if(n%2==0)
			print even
		else
			print odd

Implementation
-------------------
import java.util.*;
class Demo
{
	static String check_evenorodd(int n)
	{
		//manual code
		return (n%2==0)?"Even Number":"Odd Number";
	}

}

class  Test
{
	public static void main(String[] args) 
	{
		Scanner obj = new Scanner(System.in);
		System.out.println("Enter n value ");
		int n = obj.nextInt();
		System.out.println(Demo.check_evenorodd(n));
	}
}

Design a program to find sum of N natural numbers
---------------------------------------------------
Algorithm
	1. read n value from the user
	2. apply the logic to find sum of n natural numbers
	Logic1
		loop
	Logic2
		recursion
	Logic3
		Math formula ---> n*(n+1)/2
	3. print reult on the screen

